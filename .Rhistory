xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
theme_minimal()
# PCA
vsd <- vst(dds, blind=FALSE)
data <- plotPCA(vsd, intgroup=c("climate","treatment","day"),returnData=TRUE)
percentVar <- round(100 * attr(data, "percentVar"))
percentVar <- round
data$treatment <- factor(data$treatment, levels=c("C","H","D"), labels = c("C","H","D"))
data$day <- factor(data$day, levels=c("0","5","10"), labels = c("0","5","10"))
ggplot(data, aes(PC1, PC2, color=climate, shape=treatment)) +
geom_point(size=4, alpha=0.85) +
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
theme_minimal()
# PCA
vsd <- vst(dds, blind=FALSE)
data <- plotPCA(vsd, intgroup=c("climate","treatment","day"),returnData=TRUE)
percentVar <- round(100 * attr(data, "percentVar"))
data$treatment <- factor(data$treatment, levels=c("C","H","D"), labels = c("C","H","D"))
data$day <- factor(data$day, levels=c("0","5","10"), labels = c("0","5","10"))
ggplot(data, aes(PC1, PC2, color=climate, shape=treatment)) +
geom_point(size=4, alpha=0.85) +
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
theme_minimal()
# Counts of specific top gene! (important validatition that the normalization, model is working)
d <-plotCounts(dds, gene="MA_10426407g0030", intgroup = (c("treatment","climate")), returnData=TRUE)
d
p <-ggplot(d, aes(x=climate, y=count, shape=climate, colour = treatment)) +
theme_minimal() + theme(text = element_text(size=20), panel.grid.major=element_line(colour="grey"))
p <- p + geom_point(position=position_jitter(w=0.3,h=0), size=3) +
scale_x_discrete(limits=c("CW","HD"))
p
p <-ggplot(d, aes(x=treatment, y=count, shape=climate)) +
theme_minimal() + theme(text = element_text(size=20), panel.grid.major=element_line(colour="grey"))
p
# Counts of specific top gene! (important validatition that the normalization, model is working)
d <-plotCounts(dds, gene="MA_10426002g0010", intgroup = (c("treatment","climate")), returnData=TRUE)
d
p <-ggplot(d, aes(x=climate, y=count, shape=climate, colour = treatment)) +
theme_minimal() + theme(text = element_text(size=20), panel.grid.major=element_line(colour="grey"))
p <- p + geom_point(position=position_jitter(w=0.3,h=0), size=3) +
scale_x_discrete(limits=c("CW","HD"))
p
p <-ggplot(d, aes(x=treatment, y=count, shape=climate)) +
theme_minimal() + theme(text = element_text(size=20), panel.grid.major=element_line(colour="grey"))
p
# Counts of specific top gene! (important validatition that the normalization, model is working)
d <-plotCounts(dds, gene="MA_10426002g0010", intgroup = (c("treatment","climate")), returnData=TRUE)
d
p <-ggplot(d, aes(x=treatment, y=count, shape=climate, colour = treatment)) +
theme_minimal() + theme(text = element_text(size=20), panel.grid.major=element_line(colour="grey"))
p <- p + geom_point(position=position_jitter(w=0.3,h=0), size=3) +
scale_x_discrete(limits=c("CW","HD"))
p
p <-ggplot(d, aes(x=treatment, y=count, shape=climate)) +
theme_minimal() + theme(text = element_text(size=20), panel.grid.major=element_line(colour="grey"))
p
# Heatmap of top 20 genes sorted by pvalue
# Heatmap of top 20 genes sorted by pvalue
# Counts of specific top gene! (important validatition that the normalization, model is working)
d <-plotCounts(dds, gene="MA_10426002g0010", intgroup = (c("treatment","climate")), returnData=TRUE)
d
p <-ggplot(d, aes(x=treatment, y=count, shape=climate)) +
theme_minimal() + theme(text = element_text(size=20), panel.grid.major=element_line(colour="grey"))
p <- p + geom_point(position=position_jitter(w=0.3,h=0), size=3) +
scale_x_discrete(limits=c("C","H","D"))
p
p <-ggplot(d, aes(x=treatment, y=count, shape=climate)) +
theme_minimal() + theme(text = element_text(size=20), panel.grid.major=element_line(colour="grey"))
# Counts of specific top gene! (important validatition that the normalization, model is working)
d <-plotCounts(dds, gene="MA_10257300g0010", intgroup = (c("treatment","climate","day")), returnData=TRUE)
d
p <-ggplot(d, aes(x=treatment, y=count, color=day, shape=climate)) +
theme_minimal() + theme(text = element_text(size=20), panel.grid.major=element_line(colour="grey"))
p <- p + geom_point(position=position_jitter(w=0.3,h=0), size=3) +
scale_x_discrete(limits=c("C","H","D"))
p
p <-ggplot(d, aes(x=treatment, y=count, shape=climate)) +
theme_minimal() + theme(text = element_text(size=20), panel.grid.major=element_line(colour="grey"))
p
# Counts of specific top gene! (important validatition that the normalization, model is working)
d <-plotCounts(dds, gene="MA_10257300g0010", intgroup = (c("treatment","climate","day")), returnData=TRUE)
d
p <-ggplot(d, aes(x=treatment, y=count, color=day, shape=climate)) +
theme_minimal() + theme(text = element_text(size=20), panel.grid.major=element_line(colour="grey"))
p <- p + geom_point(position=position_jitter(w=0.3,h=0), size=3) +
scale_x_discrete(limits=c("C","H","D"))
p
# Heatmap of top 20 genes sorted by pvalue
library(pheatmap)
topgenes <- head(rownames(res_treatCD),20)
mat <- assay(vsd)[topgenes,]
install.packages("pheatmap")
# Heatmap of top 20 genes sorted by pvalue
library(pheatmap)
topgenes <- head(rownames(res_treatCD),20)
mat <- assay(vsd)[topgenes,]
mat <- mat - rowMeans(mat)
df <- as.data.frame(colData(dds)[,c("treatment","climate")])
pheatmap(mat, annotation_col=df)
# Heatmap of top 20 genes sorted by pvalue
library(pheatmap)
topgenes <- head(rownames(res_treatCD),20)
mat <- assay(vsd)[topgenes,]
mat <- mat - rowMeans(mat)
df <- as.data.frame(colData(dds)[,c("treatment","climate","day")])
pheatmap(mat, annotation_col=df)
day10countstable <- countsTableRound %>% select(contains("10"))
dim(day10countstable)
conds10<- subset(conds, day=="10")
dim(conds10)
getwd()
## Set your working directory
setwd("/Users/chege/Desktop/Spring 2020/SCHOOL/Genomics Class/RS_counts_samples" )
## Import the libraries that we're likely to need in this session
library(DESeq2)
library(dplyr)
library(tidyr)
library(ggplot2)
library(scales)
library(ggpubr)
library(wesanderson)
library(vsn)  ### First: BiocManager::install("vsn") AND BiocManager::install("hexbin")
## Import the counts matrix
countsTable <- read.table("RS_cds2kb_countsMatrix.txt", header=TRUE, row.names=1)
View(countsTable)
head(countsTable)
dim(countsTable)
countsTableRound <- round(countsTable) # Need to round because DESeq wants only integers
head(countsTableRound)
View(countsTable)
countsTableRound <- round(countsTable) # Need to round because DESeq wants only integers
head(countsTableRound)
## Import the samples description table - links each sample to factors of the experimental design.
# Need the colClasses otherwise imports "day" as numeric which DESeq doesn't like, coula altneratively change to d0, d5, d10
conds <- read.delim("RS_samples.txt", header=TRUE, stringsAsFactors = TRUE, row.names=1, colClasses=c('factor', 'factor', 'factor', 'factor'))
View(conds)
head(conds)
dim(conds)
## Let's see how many reads we have from each sample:
colSums(countsTableRound)
mean(colSums(countsTableRound))
barplot(colSums(countsTableRound), las=3, cex.names=0.5,names.arg = substring(colnames(countsTableRound),1,13))
abline(h=mean(colSums(countsTableRound)), col="blue", lwd =2)
#average number of counts per gene
mean(rowSums(countsTableRound))
median(rowSums(countsTableRound))
# avergae number of counts per gene per sample
apply(countsTableRound,2,mean)
## Create a DESeq object and define the experimental design here with the tilde
dds <- DESeqDataSetFromMatrix(countData = countsTableRound, colData = conds, design = ~ climate + day + treatment)
dim(dds)
dds <- dds[rowSums(counts(dds))>760]
dim(dds)
dds <- DESeq(dds)
resultsNames(dds)
# Order and list and summarize results from specific contrasts
# Here you set your adjusted p-value cutoff, can make summary tables of the number of genes differentially expressed (up- or down-regulated) for each contrast
res <- results(dds, alpha = 0.05)
res <- res[order(res$padj),]
head(res)
summary(res)
resultsNames(dds)
# Order and list and summarize results from specific contrasts
# Here you set your adjusted p-value cutoff, can make summary tables of the number of genes differentially expressed (up- or down-regulated) for each contrast
res <- results(dds, alpha = 0.05)
res <- res[order(res$padj),]
head(res)
summary(res)
res_treatCD <- results(dds, name = "treatment_D_vs_C", alpha=0.05)
res_treatCD <- results(dds, alpha = 0.05)
res_treatCD <- res[order(res$padj),]
head(res_treatCD)
summary(res_treatCD)
##### Data visualization #####
# MA plot
plotMA(res_treatCD,ylim=c(-3,3))
# PCA
vsd <- vst(dds, blind=FALSE)
data <- plotPCA(vsd, intgroup=c("climate","treatment","day"),returnData=TRUE)
percentVar <- round(100 * attr(data, "percentVar"))
data$treatment <- factor(data$treatment, levels=c("C","H","D"), labels = c("C","H","D"))
data$day <- factor(data$day, levels=c("0","5","10"), labels = c("0","5","10"))
ggplot(data, aes(PC1, PC2, color=climate, shape=treatment)) +
geom_point(size=4, alpha=0.85) +
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
theme_minimal()
# Counts of specific top gene! (important validatition that the normalization, model is working)
d <-plotCounts(dds, gene="MA_10257300g0010", intgroup = (c("treatment","climate","day")), returnData=TRUE)
d
p <-ggplot(d, aes(x=treatment, y=count, color=day, shape=climate)) +
theme_minimal() + theme(text = element_text(size=20), panel.grid.major=element_line(colour="grey"))
p <- p + geom_point(position=position_jitter(w=0.3,h=0), size=3) +
scale_x_discrete(limits=c("C","H","D"))
p
# Heatmap of top 20 genes sorted by pvalue
library(pheatmap)
topgenes <- head(rownames(res_treatCD),20)
mat <- assay(vsd)[topgenes,]
mat <- mat - rowMeans(mat)
df <- as.data.frame(colData(dds)[,c("treatment","climate","day")])
pheatmap(mat, annotation_col=df)
## Import the counts matrix
countsTable <- read.table("RS_cds2kb_countsMatrix.txt", header=TRUE, row.names=1)
head(countsTable)
dim(countsTable)
countsTableRound <- round(countsTable) # Need to round because DESeq wants only integers
head(countsTableRound)
## Import the samples description table - links each sample to factors of the experimental design.
# Need the colClasses otherwise imports "day" as numeric which DESeq doesn't like, coula altneratively change to d0, d5, d10
conds <- read.delim("RS_samples.txt", header=TRUE, stringsAsFactors = TRUE, row.names=1, colClasses=c('factor', 'factor', 'factor', 'factor'))
head(conds)
dim(conds)
## Let's see how many reads we have from each sample:
colSums(countsTableRound)
mean(colSums(countsTableRound))
barplot(colSums(countsTableRound), las=3, cex.names=0.5,names.arg = substring(colnames(countsTableRound),1,13))
abline(h=mean(colSums(countsTableRound)), col="blue", lwd =2)
#average number of counts per gene
mean(rowSums(countsTableRound))
median(rowSums(countsTableRound))
## Let's see how many reads we have from each sample:
colSums(countsTableRound)
mean(colSums(countsTableRound))
mean(colSums(countsTableRound))
barplot(colSums(countsTableRound), las=3, cex.names=0.5,names.arg = substring(colnames(countsTableRound),1,13))
abline(h=mean(colSums(countsTableRound)), col="blue", lwd =2)
#average number of counts per gene
mean(rowSums(countsTableRound))
median(rowSums(countsTableRound))
# avergae number of counts per gene per sample
apply(countsTableRound,2,mean)
# avergae number of counts per gene per sample
apply(countsTableRound,2,mean)
## Create a DESeq object and define the experimental design here with the tilde
dds <- DESeqDataSetFromMatrix(countData = countsTableRound, colData = conds, design = ~ climate + day + treatment)
dim(dds)
dds <- dds[rowSums(counts(dds))>760]
dim(dds)
dds <- DESeq(dds)
resultsNames(dds)
# Order and list and summarize results from specific contrasts
# Here you set your adjusted p-value cutoff, can make summary tables of the number of genes differentially expressed (up- or down-regulated) for each contrast
res <- results(dds, alpha = 0.05)
res <- res[order(res$padj),]
head(res)
summary(res)
res_treatCD <- results(dds, name = "treatment_D_vs_C", alpha=0.05)
res_treatCD <- results(dds, alpha = 0.05)
res_treatCD <- res[order(res$padj),]
head(res_treatCD)
summary(res_treatCD)
##### Data visualization #####
# MA plot
plotMA(res_treatCD,ylim=c(-3,3))
# Order and list and summarize results from specific contrasts
# Here you set your adjusted p-value cutoff, can make summary tables of the number of genes differentially expressed (up- or down-regulated) for each contrast
res <- results(dds, alpha = 0.05)
res <- res[order(res$padj),]
head(res)
summary(res)
res_treatCD <- results(dds, name = "day_10_vs_0", alpha=0.05)
res_treatCD <- results(dds, alpha = 0.05)
res_treatCD <- res[order(res$padj),]
head(res_treatCD)
summary(res_treatCD)
##### Data visualization #####
# MA plot
plotMA(res_treatCD,ylim=c(-3,3))
summary(res_treatCD)
##### Data visualization #####
# MA plot
plotMA(res_treatCD,ylim=c(-3,3))
# PCA
vsd <- vst(dds, blind=FALSE)
data <- plotPCA(vsd, intgroup=c("climate","treatment","day"),returnData=TRUE)
percentVar <- round(100 * attr(data, "percentVar"))
data <- plotPCA(vsd, intgroup=c("climate","treatment","day"),returnData=TRUE)
percentVar <- round(100 * attr(data, "percentVar"))
data$treatment <- factor(data$treatment, levels=c("C","H","D"), labels = c("C","H","D"))
data$day <- factor(data$day, levels=c("0","10"), labels = c("0","10"))
ggplot(data, aes(PC1, PC2, color=climate, shape=treatment)) +
geom_point(size=4, alpha=0.85) +
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
theme_minimal()
# Counts of specific top gene! (important validatition that the normalization, model is working)
d <-plotCounts(dds, gene="MA_10257300g0010", intgroup = (c("treatment","climate","day")), returnData=TRUE)
d
p <-ggplot(d, aes(x=treatment, y=count, color=day, shape=climate)) +
theme_minimal() + theme(text = element_text(size=20), panel.grid.major=element_line(colour="grey"))
p <- p + geom_point(position=position_jitter(w=0.3,h=0), size=3) +
scale_x_discrete(limits=c("C","H","D"))
p
# Heatmap of top 20 genes sorted by pvalue
library(pheatmap)
topgenes <- head(rownames(res_treatCD),20)
mat <- assay(vsd)[topgenes,]
mat <- mat - rowMeans(mat)
df <- as.data.frame(colData(dds)[,c("treatment","climate","day")])
pheatmap(mat, annotation_col=df)
resultsNames(dds)
# Order and list and summarize results from specific contrasts
# Here you set your adjusted p-value cutoff, can make summary tables of the number of genes differentially expressed (up- or down-regulated) for each contrast
res <- results(dds, alpha = 0.05)
res <- res[order(res$padj),]
head(res)
View(res)
summary(res)
res_treatCD <- results(dds, name = "day_10_vs_0", alpha=0.05)
res_treatCD <- results(dds, alpha = 0.05)
res_treatCD <- res[order(res$padj),]
head(res_treatCD)
summary(res_treatCD)
##### Data visualization #####
# MA plot
plotMA(res_treatCD,ylim=c(-3,3))
summary(res_treatCD)
##### Data visualization #####
# MA plot
plotMA(res_treatCD,ylim=c(-3,3))
# PCA
vsd <- vst(dds, blind=FALSE)
data <- plotPCA(vsd, intgroup=c("day"),returnData=TRUE)
percentVar <- round(100 * attr(data, "percentVar"))
data$treatment <- factor(data$treatment, levels=c("C","H","D"), labels = c("C","H","D"))
data$day <- factor(data$day, levels=c("10"), labels = c("10"))
ggplot(data, aes(PC1, PC2, color=climate, shape=treatment)) +
geom_point(size=4, alpha=0.85) +
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
theme_minimal()
# Counts of specific top gene! (important validatition that the normalization, model is working)
d <-plotCounts(dds, gene="MA_10257300g0010", intgroup = (c("treatment","climate","day")), returnData=TRUE)
d
data <- plotPCA(vsd, intgroup=c("climate","treatment","day"),returnData=TRUE)
percentVar <- round(100 * attr(data, "percentVar"))
data$treatment <- factor(data$treatment, levels=c("C","H","D"), labels = c("C","H","D"))
data <- plotPCA(vsd, intgroup=c("climate","treatment","day"),returnData=TRUE)
percentVar <- round(100 * attr(data, "percentVar"))
data$treatment <- factor(data$treatment, levels=c("C","H","D"), labels = c("C","H","D"))
data$day <- factor(data$day, levels=c("10"), labels = c("10"))
ggplot(data, aes(PC1, PC2, color=climate, shape=treatment)) +
geom_point(size=4, alpha=0.85) +
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
theme_minimal()
# Counts of specific top gene! (important validatition that the normalization, model is working)
d <-plotCounts(dds, gene="MA_10257300g0010", intgroup = (c("treatment","climate","day")), returnData=TRUE)
d
p <-ggplot(d, aes(x=treatment, y=count, color=day, shape=climate)) +
theme_minimal() + theme(text = element_text(size=20), panel.grid.major=element_line(colour="grey"))
p <- p + geom_point(position=position_jitter(w=0.3,h=0), size=3) +
scale_x_discrete(limits=c("C","H","D"))
p
# Heatmap of top 20 genes sorted by pvalue
library(pheatmap)
topgenes <- head(rownames(res_treatCD),20)
mat <- assay(vsd)[topgenes,]
mat <- mat - rowMeans(mat)
df <- as.data.frame(colData(dds)[,c("treatment","climate","day")])
pheatmap(mat, annotation_col=df)
##### Data visualization #####
# MA plot
plotMA(res_treatCD,ylim=c(-3,3))
# PCA
vsd <- vst(dds, blind=FALSE)
data <- plotPCA(vsd, intgroup=c("climate","treatment","day"),returnData=TRUE)
percentVar <- round(100 * attr(data, "percentVar"))
data$treatment <- factor(data$treatment, levels=c("C","H","D"), labels = c("C","H","D"))
data$day <- factor(data$day, levels=c("0","5","10"), labels = c("0","5","10"))
ggplot(data, aes(PC1, PC2, color=climate, shape=treatment)) +
geom_point(size=4, alpha=0.85) +
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
theme_minimal()
# Counts of specific top gene! (important validatition that the normalization, model is working)
d <-plotCounts(dds, gene="MA_10257300g0010", intgroup = (c("treatment","climate","day")), returnData=TRUE)
d
p <-ggplot(d, aes(x=treatment, y=count, color=day, shape=climate)) +
theme_minimal() + theme(text = element_text(size=20), panel.grid.major=element_line(colour="grey"))
p <- p + geom_point(position=position_jitter(w=0.3,h=0), size=3) +
scale_x_discrete(limits=c("C","H","D"))
p
# Heatmap of top 20 genes sorted by pvalue
library(pheatmap)
topgenes <- head(rownames(res_treatCD),20)
mat <- assay(vsd)[topgenes,]
mat <- mat - rowMeans(mat)
df <- as.data.frame(colData(dds)[,c("treatment","climate","day")])
pheatmap(mat, annotation_col=df)
# Counts of specific top gene! (important validatition that the normalization, model is working)
d <-plotCounts(dds, gene="MA_10257300g0010", intgroup = (c("treatment","climate","day")), returnData=TRUE)
d
dds <- DESeq(dds)
resultsNames(dds)
# Order and list and summarize results from specific contrasts
# Here you set your adjusted p-value cutoff, can make summary tables of the number of genes differentially expressed (up- or down-regulated) for each contrast
res <- results(dds, alpha = 0.05)
res <- res[order(res$padj),]
head(res)
summary(res)
res_treatCD <- results(dds, name = "day_10_vs_0", alpha=0.05)
res_treatCD <- results(dds, alpha = 0.05)
res_treatCD <- res[order(res$padj),]
head(res_treatCD)
summary(res_treatCD)
##### Data visualization #####
# MA plot
plotMA(res_treatCD,ylim=c(-3,3))
# PCA
vsd <- vst(dds, blind=FALSE)
data <- plotPCA(vsd, intgroup=c("climate","treatment","day"),returnData=TRUE)
percentVar <- round(100 * attr(data, "percentVar"))
data$treatment <- factor(data$treatment, levels=c("C","H","D"), labels = c("C","H","D"))
data$day <- factor(data$day, levels=c("0","5","10"), labels = c("0","5","10"))
ggplot(data, aes(PC1, PC2, color=climate, shape=treatment)) +
geom_point(size=4, alpha=0.85) +
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
theme_minimal()
# Counts of specific top gene! (important validatition that the normalization, model is working)
d <-plotCounts(dds, gene="MA_10257300g0010", intgroup = (c("treatment","climate","day")), returnData=TRUE)
d
p <-ggplot(d, aes(x=treatment, y=count, color=day, shape=climate)) +
theme_minimal() + theme(text = element_text(size=20), panel.grid.major=element_line(colour="grey"))
p <- p + geom_point(position=position_jitter(w=0.3,h=0), size=3) +
scale_x_discrete(limits=c("C","H","D"))
p
# Heatmap of top 20 genes sorted by pvalue
library(pheatmap)
topgenes <- head(rownames(res_treatCD),20)
mat <- assay(vsd)[topgenes,]
mat <- mat - rowMeans(mat)
df <- as.data.frame(colData(dds)[,c("treatment","climate","day")])
pheatmap(mat, annotation_col=df)
## Import the counts matrix
countsTable <- read.table("RS_cds2kb_countsMatrix.txt", header=TRUE, row.names=1)
head(countsTable)
dim(countsTable)
countsTableRound <- round(countsTable) # Need to round because DESeq wants only integers
head(countsTableRound)
## Import the samples description table - links each sample to factors of the experimental design.
# Need the colClasses otherwise imports "day" as numeric which DESeq doesn't like, coula altneratively change to d0, d5, d10
conds <- read.delim("RS_samples.txt", header=TRUE, stringsAsFactors = TRUE, row.names=1, colClasses=c('d10'))
## Set your working directory
setwd("/Users/chege/Desktop/Spring 2020/SCHOOL/Genomics Class/RS_counts_samples" )
## Import the libraries that we're likely to need in this session
library(DESeq2)
library(dplyr)
library(tidyr)
library(ggplot2)
library(scales)
library(ggpubr)
library(wesanderson)
library(vsn)  ### First: BiocManager::install("vsn") AND BiocManager::install("hexbin")
## Import the counts matrix
countsTable <- read.table("RS_cds2kb_countsMatrix.txt", header=TRUE, row.names=1)
head(countsTable)
dim(countsTable)
countsTableRound <- round(countsTable) # Need to round because DESeq wants only integers
head(countsTableRound)
## Import the samples description table - links each sample to factors of the experimental design.
# Need the colClasses otherwise imports "day" as numeric which DESeq doesn't like, coula altneratively change to d0, d5, d10
conds <- read.delim("RS_samples.txt", header=TRUE, stringsAsFactors = TRUE, row.names=1, colClasses=c('d10'))
## Import the samples description table - links each sample to factors of the experimental design.
# Need the colClasses otherwise imports "day" as numeric which DESeq doesn't like, coula altneratively change to d0, d5, d10
conds <- read.delim("RS_samples.txt", header=TRUE, stringsAsFactors = TRUE, row.names=1, colClasses=c(d10))
library(devtools)
install_github("al2na/methylKit", build_vignettes=FALSE,
repos=BiocManager::repositories(),
dependencies=TRUE)
library(devtools)
install_github("al2na/methylKit", build_vignettes=FALSE,
repos=BiocManager::repositories(),
dependencies=TRUE)
library(devtools)
install_github("al2na/methylKit", build_vignettes=FALSE,
repos=BiocManager::repositories(),
dependencies=TRUE,type="source")
library(devtools)
install_github("al2na/methylKit", build_vignettes=FALSE,
repos=BiocManager::repositories(),ref="development",
dependencies=TRUE)
install.packages("tidyverse")
install.packages(c("bookdown", "caret", "Ckmeans.1d.dp", "class", "covr", "crosstalk", "deSolve", "dplyr", "DT", "foreach", "foreign", "fs", "ggrepel", "Hmisc", "lava", "locfit", "mlr", "ModelMetrics", "nlme", "parallelMap", "ParamHelpers", "pROC", "recipes", "robust", "robustbase", "roxygen2", "shiny", "survival", "xgboost", "xml2"))
install.packages(c("bookdown", "caret", "Ckmeans.1d.dp", "class", "covr", "crosstalk", "deSolve", "dplyr", "DT", "foreach", "foreign", "fs", "ggrepel", "Hmisc", "lava", "locfit", "mlr", "ModelMetrics", "nlme", "parallelMap", "ParamHelpers", "pROC", "recipes", "robust", "robustbase", "roxygen2", "shiny", "survival", "xgboost", "xml2"))
install.packages(c("bookdown", "caret", "Ckmeans.1d.dp", "class", "covr", "crosstalk", "deSolve", "dplyr", "DT", "foreach", "foreign", "fs", "ggrepel", "Hmisc", "lava", "locfit", "mlr", "ModelMetrics", "nlme", "parallelMap", "ParamHelpers", "pROC", "recipes", "robust", "robustbase", "roxygen2", "shiny", "survival", "xgboost", "xml2"))
installr: install.packages("installr")
install.packages("installr")
updateR()
install_github("al2na/methylKit", build_vignettes=FALSE,
library(devtools)
install_github("al2na/methylKit", build_vignettes=FALSE,
repos=BiocManager::repositories(),
dependencies=TRUE)
install.packages("pheatmap")
install.packages("tidyverse")
library(methylKit)
library(tidyverse)
library(ggplot2)
library(pheatmap)
# use methRead to read in the coverage files
myobj <- methRead()
# We can look at the coverage for individual samples with getCoverageStats()
getCoverageStats()
wd
setwd()
setwd
